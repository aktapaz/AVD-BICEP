name: AVD Deployment

on:
  workflow_dispatch:

jobs:
  AVDDeployment:
    name: AVD Deployment
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
         
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          
      - name: Pre-build Script
        uses: azure/powershell@v1
        id: preBuildScript
        with:
          inlineScript: |
            ./GitHubActions/PreBuild.ps1 -SharedImageGalleryResourceGroup "${{ vars.SHAREDIMAGEGALLERYRESOURCEGROUP }}" `
            -SharedImageGalleryName "${{ vars.SHAREDIMAGEGALLERYNAME }}" `
            -SharedImageGalleryDefinitionName "${{ vars.SHAREDIMAGEGALLERYDEFINITIONNAME }}" `
            -vmNamePrefix "${{ vars.VMNAMEPREFIX }}" `
            -resourceGroup "${{ vars.RESOURCEGROUP }}" `
            -hostPoolName "${{ vars.HOSTPOOLNAME }}" `
            -update "${{ vars.UPDATE }}" `
            -SharedImageGalleryVersionName "${{ vars.SHAREDIMAGEGALLERYVERSIONNAME }}" `
            -newBuild "${{ vars.NEWBUILD }}"
          azPSVersion: "latest"
          
      - name: Deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          scope: 'subscription'
          region: northeurope
          template: ./GitHubActions/mainBuild.bicep
          parameters: './GitHubActions/mainParameters.JSON AVDResourceGroup=${{ vars.RESOURCEGROUP }} tokenExpirationTime=${{ steps.preBuildScript.outputs.TOKEN }} newBuild=${{ vars.NEWBUILD }} sharedImageGallerySubscription=${{ secrets.AZURE_GALLERY_SUBSCRIPTION }} sharedImageGalleryResourceGroup=${{ vars.SHAREDIMAGEGALLERYRESOURCEGROUP }} sharedImageGalleryName=${{ vars.SHAREDIMAGEGALLERYNAME }} sharedImageGalleryDefinitionname=${{ vars.SHAREDIMAGEGALLERYDEFINITIONNAME }} sharedImageGalleryVersionName=${{ steps.preBuildScript.outputs.LATESTVERSION }} AADJoin=false intune=false ephemeral=${{ vars.EPHEMERAL }} vmResourceGroup=${{ vars.VMRESOURCEGROUP }} vmSize=${{ vars.VMSIZE }} vmLocation=${{ vars.VMLOCATION }} vmDiskType=${{ vars.VMDISKTYPE }} vmPrefix=${{ steps.preBuildScript.outputs.PREFIX }} numberOfInstances=${{ vars.NUMBEROFINSTANCES }} currentInstances=${{ steps.preBuildScript.outputs.CURRENTNOHOSTS }} AzTenantID=${{ secrets.AZURE_TENANTID }} appID=${{ secrets.APPID }} appSecret=${{ secrets.APPSECRET }} assignUsers=${{ vars.ASSIGNUSERS }} defaultUsers=${{ vars.DEFAULTUSERS }} logworkspaceSub=${{ secrets.LOGWORKSPACESUB }} logworkspaceResourceGroup=${{ vars.LOGWORKSPACERESOURCEGROUP }} logworkspaceName=${{ vars.LOGWORKSPACENAME }} workspaceKey=${{ secrets.WORKSPACEKEY }} workspaceID=${{ secrets.WORKSPACEID }} domain=${{ secrets.DOMAIN }} administratorAccountUserName=${{ secrets.ADMINUSERNAME }} administratorAccountPassword=${{ secrets.ADMINPASSWORD }} localAdministratorAccountUserName=${{ secrets.LOCALADMINUSERNAME }} localAdministratorAccountPassword=${{ secrets.LOCALADMINPASSWORD }} hostPoolName="${{ vars.HOSTPOOLNAME }}" hostPoolFriendlyName="${{ vars.HOSTPOOLFRIENDLY}}" workspaceName="${{ vars.WORKSPACENAME }}" appGroupFriendlyName="${{ vars.APPGROUPFRIENDLYNAME }}"'
          failOnStdErr: false
          
      - name: Cleanup Script
        uses: azure/powershell@v1
        with:
          inlineScript: |
            ./GitHubActions/Cleanup.ps1 -hostPoolName "${{ vars.HOSTPOOLNAME }}" `
            -domain "${{ secrets.DOMAIN }}" `
            -vmResourceGroup "${{ vars.VMRESOURCEGROUP }}" `
            -resourceGroup "${{ vars.RESOURCEGROUP }}" `
            -update "${{ vars.UPDATE }}" `
            -version "${{ steps.preBuildScript.outputs.LATESTVERSION }}"
          azPSVersion: "latest"
